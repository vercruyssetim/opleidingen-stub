VERSION_NUMBER = "0.0.0"

JENKINS_GRADLE_NAME = "opleidingen_maven"

TEST_SERVER_USERNAME = env.TEST_SERVER_USERNAME
TEST_SERVER_URL = env.TEST_SERVER_URL

try {
    stage("pre-steps") {
        node("linux && docker") {
            cleanWorkspace()
            cloneProject()
            buildMavenImage()
        }
    }
    stage("build") {
        node("linux && docker") {
            maven("test -Dmaven.test.failure.ignore=true --settings .maven/settings_jenkins_vdab.xml")
            archiveAllTestResults()
        }
    }
    stage("deploy") {
        node("linux && docker") {
            maven("versions:set -DnewVersion=${VERSION_NUMBER} -DskipTests --settings .maven/settings_jenkins_vdab.xml")
            maven("clean install -DskipFrontendPlugin -DskipTests --settings .maven/settings_jenkins_vdab.xml")
        }
    }
    stage("deploy to Test") {
        milestone 1
        askForDeploy('Deploy to Test?')
        milestone 2
        node("linux && docker") {
            stopServer(TEST_SERVER_USERNAME, TEST_SERVER_URL)
            copyJar(TEST_SERVER_USERNAME, TEST_SERVER_URL)
            startServer(TEST_SERVER_USERNAME, TEST_SERVER_URL)
        }
    }
} catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException exception) {
    return
}

def cleanWorkspace() {
    sh "mkdir ~/.tmp/${env.BUILD_TAG}"
    try {
        sh "mv opleidinge-server/src/main/resources/ui/node_modules ~/.tmp/${env.BUILD_TAG}/node_modules"
        sh "mv opleidinge-server/src/main/resources/ui/yarn.lock ~/.tmp/${env.BUILD_TAG}/yarn.lock"
    } catch (err) {
    }
    sh "rm -rf *"
    try {
        sh "mkdir -p opleidinge-server/src/main/resources/ui/src"
        sh "mv ~/.tmp/${env.BUILD_TAG}/node_modules/ opleidinge-server/src/main/resources/ui/node_modules"
        sh "mv ~/.tmp/${env.BUILD_TAG}/yarn.lock opleidinge-server/src/main/resources/ui/yarn.lock"
    } catch (err) {
    }
    sh "rm -rf ~/.tmp/${env.BUILD_TAG}"
}

def cloneProject() {
    checkout scm
}

def buildMavenImage() {
    sh "docker build -t opleidingen/maven opleidingen-server/ "
}

def archiveAllTestResults() {
    step([$class: "JUnitResultArchiver", testResults: "mentor-server/target/surefire-reports/TEST-*.xml"])
}

def askForDeploy(message) {
    timeout(time: 28, unit: 'DAYS') {
        input message: "${message}"
    }
}

def copyJar(username, host) {
    sh "scp opleiding-server/target/opleidingen-server-${VERSION_NUMBER}.jar ${username}@${host}:opleidingen/server/opleidingen-server.jar"
}

def startServer(username, host) {
    sh "ssh ${username}@${host} opleidingen/server/startMentorServer.sh"
}

def stopServer(username, host) {
    try {
        sh "ssh ${username}@${host} opleidingen/server/stopMentorServer.sh"
    } catch (err) {
        printError(err)
    }
}

def maven(task) {
    def mavenName = "${JENKINS_GRADLE_NAME}.${VERSION_NUMBER}"

    try {
        startMavenContainer(mavenName)
        execMaven(mavenName, task)
    } catch (err) {
        printError(err)
        currentBuild.result = "FAILURE"
    } finally {
        removeContainer(mavenName)
    }
}

def startMavenContainer(mavenName) {
    def currentDir = pwd()
    killContainer(mavenName)
    sh "docker run -t -d --name ${mavenName} -v $currentDir/opleidingen-server:/usr/src/opleidingen -v /usr/maven/.m2/repository:/usr/maven/.m2/repository opleidingen/maven bash"
}
def execMaven(mavenName, task) {
    sh "docker exec ${mavenName} mvn  ${task}"
}

def killContainer(name) {
    try {
        sh "docker rm -vf ${name}"
    } catch (err) {
    }
}

def removeContainer(name) {
    try {
        sh "docker stop ${name}"
    } catch (err) {
    }
    try {
        sh "docker rm -v ${name}"
    } catch (err) {
    }
}

def printError(error) {
    println "******************************* WORKFLOW ERROR *******************************"
    println "${error}"
    println "******************************************************************************"
}